rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isParticipant(participants) {
      return isAuthenticated() && request.auth.uid in participants;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow update: if isOwner(userId) || 
        (isAuthenticated() && 
         request.auth.uid in get(/databases/$(database)/documents/chats/$(request.resource.data.diff(resource.data).affectedKeys().hasOnly(['chats']))).data.participants);
      allow create, delete: if isOwner(userId);
    }

    // Chats collection
    match /chats/{chatId} {
      allow read: if isParticipant(resource.data.participants);
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update, delete: if isParticipant(resource.data.participants);
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow update: if isAuthenticated() && (
          // Allow sender to update their own messages
          request.auth.uid == resource.data.senderId ||
          // Allow participants to update read status
          (isParticipant(get(/databases/$(database)/documents/chats/$(chatId)).data.participants) &&
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']))
        );
        allow delete: if isAuthenticated() && 
          request.auth.uid == resource.data.senderId;
      }
    }

    // Requests collection
    match /requests/{requestId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || 
        resource.data.status == 'waiting' ||
        (resource.data.status == 'matched' && 
         resource.data.chatId != null &&
         request.auth.uid in get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participants)
      );
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        (resource.data.status == 'waiting' && 
         request.resource.data.status == 'matched' &&
         request.resource.data.chatId != null &&
         request.auth.uid in get(/databases/$(database)/documents/chats/$(request.resource.data.chatId)).data.participants)
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        (resource.data.status == 'matched' && 
         resource.data.chatId != null &&
         request.auth.uid in get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participants)
      );
    }
  }
}